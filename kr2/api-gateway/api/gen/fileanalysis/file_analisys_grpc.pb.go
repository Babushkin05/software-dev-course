// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fileanalysis/file_analisys.proto

package fileanalysispb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileAnalysisService_Analyze_FullMethodName      = "/fileanalysis.FileAnalysisService/Analyze"
	FileAnalysisService_GetWordCloud_FullMethodName = "/fileanalysis.FileAnalysisService/GetWordCloud"
)

// FileAnalysisServiceClient is the client API for FileAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileAnalysisServiceClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
	GetWordCloud(ctx context.Context, in *WordCloudRequest, opts ...grpc.CallOption) (*WordCloudResponse, error)
}

type fileAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileAnalysisServiceClient(cc grpc.ClientConnInterface) FileAnalysisServiceClient {
	return &fileAnalysisServiceClient{cc}
}

func (c *fileAnalysisServiceClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, FileAnalysisService_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileAnalysisServiceClient) GetWordCloud(ctx context.Context, in *WordCloudRequest, opts ...grpc.CallOption) (*WordCloudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WordCloudResponse)
	err := c.cc.Invoke(ctx, FileAnalysisService_GetWordCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileAnalysisServiceServer is the server API for FileAnalysisService service.
// All implementations must embed UnimplementedFileAnalysisServiceServer
// for forward compatibility.
type FileAnalysisServiceServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
	GetWordCloud(context.Context, *WordCloudRequest) (*WordCloudResponse, error)
	mustEmbedUnimplementedFileAnalysisServiceServer()
}

// UnimplementedFileAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileAnalysisServiceServer struct{}

func (UnimplementedFileAnalysisServiceServer) Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedFileAnalysisServiceServer) GetWordCloud(context.Context, *WordCloudRequest) (*WordCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordCloud not implemented")
}
func (UnimplementedFileAnalysisServiceServer) mustEmbedUnimplementedFileAnalysisServiceServer() {}
func (UnimplementedFileAnalysisServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileAnalysisServiceServer will
// result in compilation errors.
type UnsafeFileAnalysisServiceServer interface {
	mustEmbedUnimplementedFileAnalysisServiceServer()
}

func RegisterFileAnalysisServiceServer(s grpc.ServiceRegistrar, srv FileAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileAnalysisService_ServiceDesc, srv)
}

func _FileAnalysisService_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileAnalysisServiceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileAnalysisService_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileAnalysisServiceServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileAnalysisService_GetWordCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileAnalysisServiceServer).GetWordCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileAnalysisService_GetWordCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileAnalysisServiceServer).GetWordCloud(ctx, req.(*WordCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileAnalysisService_ServiceDesc is the grpc.ServiceDesc for FileAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileanalysis.FileAnalysisService",
	HandlerType: (*FileAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _FileAnalysisService_Analyze_Handler,
		},
		{
			MethodName: "GetWordCloud",
			Handler:    _FileAnalysisService_GetWordCloud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileanalysis/file_analisys.proto",
}
